// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/mattermost/mattermost-server/model"
import store "github.com/mattermost/mattermost-server/store"

// PluginStore is an autogenerated mock type for the PluginStore type
type PluginStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: pluginId, key
func (_m *PluginStore) Delete(pluginId string, key string) store.StoreChannel {
	ret := _m.Called(pluginId, key)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string, string) store.StoreChannel); ok {
		r0 = rf(pluginId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// Get provides a mock function with given fields: pluginId, key
func (_m *PluginStore) Get(pluginId string, key string) store.StoreChannel {
	ret := _m.Called(pluginId, key)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string, string) store.StoreChannel); ok {
		r0 = rf(pluginId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// SaveOrUpdate provides a mock function with given fields: keyVal
func (_m *PluginStore) SaveOrUpdate(keyVal *model.PluginKeyValue) store.StoreChannel {
	ret := _m.Called(keyVal)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.PluginKeyValue) store.StoreChannel); ok {
		r0 = rf(keyVal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

func (_m *PluginStore) CreatePluginStatus(pluginStatus *model.PluginStatus) store.StoreChannel {
	ret := _m.Called(pluginStatus)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.PluginStatus) store.StoreChannel); ok {
		r0 = rf(pluginStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

func (_m *PluginStore) GetPluginStatuses() store.StoreChannel {
	ret := _m.Called()

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func() store.StoreChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

func (_m *PluginStore) UpdatePluginStatusState(pluginStatus *model.PluginStatus) store.StoreChannel {
	ret := _m.Called(pluginStatus)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.PluginStatus) store.StoreChannel); ok {
		r0 = rf(pluginStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

func (_m *PluginStore) DeletePluginStatus(pluginStatus *model.PluginStatus) store.StoreChannel {
	ret := _m.Called(pluginStatus)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.PluginStatus) store.StoreChannel); ok {
		r0 = rf(pluginStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

func (_m *PluginStore) PrunePluginStatuses(excludeClusterDiscoveryId string) store.StoreChannel {
	ret := _m.Called(excludeClusterDiscoveryId)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string) store.StoreChannel); ok {
		r0 = rf(excludeClusterDiscoveryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}
